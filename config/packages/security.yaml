security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^\/api\/(?!internal\/|docs$).*
            security: true
            stateless: true
            oauth2: true
        main:
            lazy: true
            provider: app_user_provider
            user_checker: App\Security\UserChecker
            form_login:
                login_path: login
                check_path: login
                enable_csrf: true
                csrf_token_id: login
                form_only: true
            login_link:
                check_route: login_check
                signature_properties: [id, email]
                max_uses: 3
            entry_point: App\Security\AuthenticationEntryPoint
            remember_me:
                always_remember_me: true
                signature_properties: ['id', 'email']
            switch_user: true
            login_throttling:
                max_attempts: 3
            logout:
                path: /logout
                clear_site_data:
                    - cookies
                    - storage

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/installation, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/api, roles: ROLE_API }
        - { path: ^/(login$|request-login-link$|forgot-password$|register$|reset-password), roles: PUBLIC_ACCESS }
        - { path: ^/(token$|.well-known/jwks.json), roles: PUBLIC_ACCESS }
        - { path: ^/authorize, roles: IS_AUTHENTICATED_REMEMBERED }
        - { path: ^/, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
