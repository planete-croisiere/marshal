<?php

declare(strict_types=1);

namespace App\Entity\Parameter;

use App\Entity\CommonProperties;
use App\Repository\Parameter\ParameterCategoryRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: ParameterCategoryRepository::class)]
class ParameterCategory
{
    use CommonProperties\Required\AutoGeneratedId;
    use CommonProperties\Required\Name;

    #[ORM\OneToMany(targetEntity: Parameter::class, mappedBy: 'category')]
    private Collection $parameters;

    public function __construct()
    {
        $this->parameters = new ArrayCollection();
    }

    public function __toString(): string
    {
        return $this->getName();
    }

    /**
     * @return Collection<int, Parameter>
     */
    public function getParameters(): Collection
    {
        return $this->parameters;
    }

    public function addParameter(Parameter $parameter): static
    {
        if (!$this->parameters->contains($parameter)) {
            $this->parameters->add($parameter);
            $parameter->setCategory($this);
        }

        return $this;
    }

    public function removeParameter(Parameter $parameter): static
    {
        if ($this->parameters->removeElement($parameter)) {
            // set the owning side to null (unless already changed)
            if ($parameter->getCategory() === $this) {
                $parameter->setCategory(null);
            }
        }

        return $this;
    }
}
